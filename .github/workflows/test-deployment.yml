name: Test Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'connectivity'
        type: choice
        options:
        - connectivity
        - deployment
        - health_check

jobs:
  test-connectivity:
    runs-on: ubuntu-latest
    name: Test SSH Connectivity
    if: github.event.inputs.test_type == 'connectivity' || github.event.inputs.test_type == 'deployment'
    
    steps:
    - name: Install Cloudflared
      run: |
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb || sudo apt-get install -f -y
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    - name: Setup Cloudflare Access
      run: |
        echo "${{ secrets.CLOUDFLARE_SERVICE_TOKEN }}" | cloudflared access login --service-token-stdin || true
        
    - name: Test SSH Connection
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o ConnectTimeout=30 \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "echo '✅ SSH connection successful' && whoami && uname -a"
            
  test-health:
    runs-on: ubuntu-latest
    name: Test Application Health
    if: github.event.inputs.test_type == 'health_check' || github.event.inputs.test_type == 'deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Cloudflared
      run: |
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb || sudo apt-get install -f -y
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    - name: Setup Cloudflare Access
      run: |
        echo "${{ secrets.CLOUDFLARE_SERVICE_TOKEN }}" | cloudflared access login --service-token-stdin || true
        
    - name: Check Application Health
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "cd /home/ec2-user/thakii-pdf-engine &&
             source venv/bin/activate &&
             python -c 'from src.main import CommandLineArgRunner; print(\"✅ Application is healthy\")' &&
             python -m src.main --help &&
             sudo systemctl status thakii-pdf-engine --no-pager || echo 'Service not running'"
             
  test-deployment:
    needs: test-connectivity
    runs-on: ubuntu-latest
    name: Test Deployment Process
    if: github.event.inputs.test_type == 'deployment'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Run local tests
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install --upgrade pip
        pip install opencv-python fpdf2 webvtt-py srt numpy pillow parameterized
        python -m unittest tests.test_time_utils tests.test_subtitle_srt_parser tests.test_subtitle_webvtt_parser -v
        
    - name: Install Cloudflared
      run: |
        wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
        sudo dpkg -i cloudflared-linux-amd64.deb || sudo apt-get install -f -y
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
    - name: Setup Cloudflare Access
      run: |
        echo "${{ secrets.CLOUDFLARE_SERVICE_TOKEN }}" | cloudflared access login --service-token-stdin || true
        
    - name: Test deployment directory
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "ls -la /home/ec2-user/thakii-pdf-engine/ &&
             cat /home/ec2-user/thakii-pdf-engine/deployment_info.txt"
             
    - name: Verify service configuration
      run: |
        ssh -o ProxyCommand="cloudflared access ssh --hostname %h" \
            -o StrictHostKeyChecking=no \
            ec2-user@thakii-02.fds-1.com \
            "sudo systemctl is-enabled thakii-pdf-engine &&
             sudo systemctl status thakii-pdf-engine --no-pager || echo 'Service configured but not running'"
